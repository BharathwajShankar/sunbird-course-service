{
	"info": {
		"_postman_id": "0cac8b9b-6c98-4ef0-8ce7-a715b5adf768",
		"name": "Lms_APIs Test",
		"description": "The LMS APIs is a collection of API's for creation and management of batches,enrollment to the courses,content state related APIs,Aggregation Apis",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "4875988",
		"_collection_link": "https://dark-star-147860.postman.co/workspace/LernBBAPIs~32e17cc4-6806-407e-b8ef-485ad4d0b712/collection/4875988-0cac8b9b-6c98-4ef0-8ce7-a715b5adf768?action=share&source=collection_link&creator=4875988"
	},
	"item": [
		{
			"name": "Positive",
			"item": [
				{
					"name": "BatchAPIs",
					"item": [
						{
							"name": "BatchCreation",
							"item": [
								{
									"name": "200 - Minimum input value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Extract the batchId from the response and set it to the environment variable",
													"pm.test(\"Set batchId in environment variable\", function () {",
													"    const responseJson = pm.response.json();",
													"    console.log( responseJson.result.batchId)",
													"    pm.environment.set(\"batch_id\", responseJson.result.batchId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"courseId\": \"{{course_id}}\",\n        \"name\": \"{{batch_name}}\",\n        \"enrollmentType\": \"open\",\n        \"startDate\": \"{{batch_start_date}}\",\n        \"endDate\": \"{{batch_end_date}}\"\n    }\n}"
										},
										"url": "{{host}}/api/course/v1/batch/create"
									},
									"response": []
								}
							]
						},
						{
							"name": "BatchUpdation",
							"item": [
								{
									"name": "200 - Minimum input value",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "**Accept** relates to content-Type such as **\"MIME\"**, Its used in response body for executing different multi purpose operations.Therefore, its important that the server is correctly set up, so that the MIME types transmitted are recognised and correct to determine what action to do when a resource is fetched."
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be:- \n\n  - Application/json\n\n  - Multipart/form-data\n\n  - Application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text",
												"description": "Time Stamp at which **Update a batch** request was sent."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"type": "text",
												"description": "This Id Uniquely identifies a request if the same API is executed multiple times."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"status\": 1,\n        \"courseId\": \"{{course_id}}\",\n        \"id\": \"{{batch_id}}\"\n    }\n}"
										},
										"url": "{{host}}/api/course/v1/batch/update"
									},
									"response": []
								}
							]
						},
						{
							"name": "BatchRead",
							"item": [
								{
									"name": "200 - Minimum input value",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be:- \n\n  - Application/json\n\n  - Multipart/form-data\n\n  - Application/x-www-form-urlencoded"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text",
												"description": "Time Stamp at which **Fetch a batch** request was sent."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text",
												"description": "This Id Uniquely identifies a request if the same API is executed multiple times."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"type": "text",
												"description": "This Id Uniquely identifies the type of device (Mobile)(desktop) used to access Sunbird."
											}
										],
										"url": "{{host}}/api/course/v1/batch/read/{{batch_id}}"
									},
									"response": []
								}
							]
						},
						{
							"name": "BatchSearch",
							"item": [
								{
									"name": "200 - Minimum input value",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be:- \n\n  - Application/json\n\n  - Multipart/form-data\n\n  - Application/x-www-form-urlencoded"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text",
												"description": "Time Stamp at which **Lists the existing batches** request was sent."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text",
												"description": "This Id Uniquely identifies a request if the same API is executed multiple times."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"type": "text",
												"description": "This Id Uniquely identifies the type of device (Mobile)(desktop) used to access Sunbird."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"filters\": {},\n        \"limit\": 2\n    }\n}"
										},
										"url": "{{host}}/api/course/v1/batch/list"
									},
									"response": []
								}
							]
						},
						{
							"name": "BatchCertificate",
							"item": [
								{
									"name": "BatchCertificateTemplateAddV1",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"batch\": {\n            \"courseId\": \"{{course_id}}\",\n            \"batchId\": \"{{batch_id}}\",\n            \"template\": {\n                \"identifier\": \"{{asset_id}}\",\n                \"criteria\": {\n                    \"enrollment\": {\n                        \"status\": \"2\"\n                    }\n                },\n                \"signatoryList\": [\n                    {\n                        \"name\": \"string\",\n                        \"id\": \"string\",\n                        \"designation\": \"CEO\",\n                        \"image\": \"string\"\n                    }\n                ],\n                \"issuer\": {\n                    \"name\": \"string\",\n                    \"url\": \"string\",\n                    \"publicKey\": [\n                        7,\n                        8\n                    ]\n                }\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}/api/course/batch/cert/v1/template/add"
									},
									"response": []
								},
								{
									"name": "BatchCertificateTemplateRemoveV1",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"batch\": {\n            \"courseId\": \"{{course_id}}\",\n            \"batchId\": \"{{batch_id}}\",\n            \"template\": {\n                \"templateId\": \"{{asset_id}}\"\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}/api/course/batch/cert/v1/template/remove"
									},
									"response": []
								},
								{
									"name": "BatchCertificateIssueV1",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-authenticated-user-token",
												"value": "{{keycloak_access_token}}"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n           \"courseId\": \"{{course_id}}\",\n            \"batchId\": \"{{batch_id}}\",\n            \"userIds\": [\"{{user_id}}\"]\n    }\n}"
										},
										"url": "{{host}}/api/course/batch/cert/v1/issue"
									},
									"response": []
								}
							]
						},
						{
							"name": "BatchList",
							"item": [
								{
									"name": "200 - Minimum input value",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"filters\": {}\n    }\n}"
										},
										"url": "{{host}}/api/course/v1/batch/list"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "CourseEnroll",
					"item": [
						{
							"name": "CourseEnrollV1",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"request\": {\n      \"courseId\": \"{{course_id}}\",\n      \"batchId\": \"{{batch_id}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/course/v1/enroll"
							},
							"response": []
						},
						{
							"name": "CourseUnEnrollV1",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"request\": {\n      \"courseId\": \"{{course_id}}\",\n      \"batchId\": \"{{batch_id}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/course/v1/unenroll"
							},
							"response": []
						},
						{
							"name": "CourseEnrollListV1",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									}
								],
								"url": "{{host}}/api/course/v1/user/enrollment/list/{{user_id}}"
							},
							"response": []
						}
					]
				},
				{
					"name": "ContentAPIs",
					"item": [
						{
							"name": "200 - Minimum input value",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"filters\": {}\n    }\n}"
								},
								"url": "{{host}}/api/content/v1/search"
							},
							"response": []
						},
						{
							"name": "ContentStateReadV1",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"userId\": \"{{user_id}}\",\n        \"courseId\": \"{{course_id}}\",\n        \"batchId\": \"{{batch_id}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/course/v1/content/state/read"
							},
							"response": []
						},
						{
							"name": "ContentStateUpdateV1",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"request\": {\n    \"userId\": \"{{user_id}}\",\n    \"contents\": [\n      {\n        \"contentId\": \"{{content_id}}\",\n        \"batchId\": \"{{batch_id}}\",\n        \"status\": 2,\n        \"courseId\": \"{{course_id}}\",\n        \"lastAccessTime\": \"2020-11-23 12:58:35:179+0000\"\n      }\n    ]\n  }\n}"
								},
								"url": "{{host}}/api/course/v1/content/state/update"
							},
							"response": []
						}
					]
				},
				{
					"name": "AggregateAPIs",
					"item": [
						{
							"name": "200 - Minimum input value",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"request\": {\n    \"groupId\": \"{{group_id}}\",\n    \"activityId\": \"{{activity_id}}\",\n    \"activityType\": \"Course\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/data/v1/group/activity/agg"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Negative",
			"item": [
				{
					"name": "BatchAPIs",
					"item": [
						{
							"name": "BatchCreation",
							"item": [
								{
									"name": "400 - missing enrollmentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();",
													"",
													"// Verification",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Verify responseCode name",
													"pm.test(\"Status code name has string \\\"Bad Request\\\"\", () => {",
													"    pm.expect(pm.response.status).to.have.string(\"Bad Request\");",
													"});",
													"",
													"",
													"// Validation",
													"// Verify responseCode",
													"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
													"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
													"});",
													"",
													"// Verify params",
													"pm.test(\"params.err should be \\\"MANDATORY_PARAMETER_MISSING\\\"\", () => {",
													"    pm.expect(jsonResponse.params.err).to.eql(\"MANDATORY_PARAMETER_MISSING\");",
													"});",
													"pm.test(\"params.errmsg should be \\\"Mandatory parameter enrollmentType is missing.\\\"\", () => {",
													"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Mandatory parameter enrollmentType is missing.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}"
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"courseId\": \"{{course_id}}\",\n    \"name\": \"{{batch_name}}\"\n  }\n}"
										},
										"url": "https://dev.sunbirded.org/api/course/v1/batch/create"
									},
									"response": []
								},
								{
									"name": "400 - missing startDate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();",
													"",
													"// Verification",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Verify responseCode name",
													"pm.test(\"Status code name has string \\\"Bad Request\\\"\", () => {",
													"    pm.expect(pm.response.status).to.have.string(\"Bad Request\");",
													"});",
													"",
													"",
													"// Validation",
													"// Verify responseCode",
													"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
													"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
													"});",
													"",
													"// Verify params",
													"pm.test(\"params.err should be \\\"MANDATORY_PARAMETER_MISSING\\\"\", () => {",
													"    pm.expect(jsonResponse.params.err).to.eql(\"MANDATORY_PARAMETER_MISSING\");",
													"});",
													"pm.test(\"params.errmsg should be \\\"Mandatory parameter startDate is missing.\\\"\", () => {",
													"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Mandatory parameter startDate is missing.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}"
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"courseId\": \"{{course_id}}\",\n        \"name\": \"{{batch_name}}\",\n        \"description\": \"{{batch_description}}\",\n        \"enrollmentType\": \"open\",\n        \"endDate\": \"{{batch_end_date}}\"\n    }\n}"
										},
										"url": "https://dev.sunbirded.org/api/course/v1/batch/create"
									},
									"response": []
								},
								{
									"name": "400 - missing courseId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();",
													"",
													"// Verification",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Verify responseCode name",
													"pm.test(\"Status code name has string \\\"Bad Request\\\"\", () => {",
													"    pm.expect(pm.response.status).to.have.string(\"Bad Request\");",
													"});",
													"",
													"",
													"// Validation",
													"// Verify responseCode",
													"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
													"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
													"});",
													"",
													"// Verify params",
													"pm.test(\"params.err should be \\\"MANDATORY_PARAMETER_MISSING\\\"\", () => {",
													"    pm.expect(jsonResponse.params.err).to.eql(\"MANDATORY_PARAMETER_MISSING\");",
													"});",
													"pm.test(\"params.errmsg should be \\\"Mandatory parameter courseId/collectionId is missing.\\\"\", () => {",
													"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Mandatory parameter courseId/collectionId is missing.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}"
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"name\": \"{{batch_name}}\",\n        \"description\": \"{{batch_description}}\",\n        \"enrollmentType\": \"open\",\n        \"endDate\": \"{{batch_end_date}}\"\n    }\n}"
										},
										"url": "https://dev.sunbirded.org/api/course/v1/batch/create"
									},
									"response": []
								},
								{
									"name": "400 - missing batch name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();",
													"",
													"// Verification",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Verify responseCode name",
													"pm.test(\"Status code name has string \\\"Bad Request\\\"\", () => {",
													"    pm.expect(pm.response.status).to.have.string(\"Bad Request\");",
													"});",
													"",
													"// Validation",
													"// Verify responseCode",
													"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
													"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
													"});",
													"",
													"// Verify params",
													"pm.test(\"params.err should be \\\"MANDATORY_PARAMETER_MISSING\\\"\", () => {",
													"    pm.expect(jsonResponse.params.err).to.eql(\"MANDATORY_PARAMETER_MISSING\");",
													"});",
													"pm.test(\"params.errmsg should be \\\"Mandatory parameter name is missing.\\\"\", () => {",
													"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Mandatory parameter name is missing.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}"
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"courseId\": \"{{course_id}}\",\n        \"description\": \"{{batch_description}}\",\n        \"enrollmentType\": \"open\",\n        \"startDate\": \"{{batch_start_date}}\",\n        \"endDate\": \"{{batch_end_date}}\"\n    }\n}"
										},
										"url": "https://dev.sunbirded.org/api/course/v1/batch/create"
									},
									"response": []
								},
								{
									"name": "400 - invalid date format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();",
													"",
													"// Verification",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Verify responseCode name",
													"pm.test(\"Status code name has string \\\"Bad Request\\\"\", () => {",
													"    pm.expect(pm.response.status).to.have.string(\"Bad Request\");",
													"});",
													"",
													"// Validation",
													"// Verify responseCode",
													"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
													"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
													"});",
													"",
													"// Verify params",
													"pm.test(\"params.err should be \\\"DATE_FORMAT_ERRROR\\\"\", () => {",
													"    pm.expect(jsonResponse.params.err).to.eql(\"DATE_FORMAT_ERRROR\");",
													"});",
													"pm.test(\"params.errmsg should be \\\"Date format error.\\\"\", () => {",
													"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Date format error.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}"
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"courseId\": \"{{course_id}}\",\n    \"name\": \"{{batch_name}}\",\n    \"description\": \"{{batch_description}}\",\n    \"enrollmentType\": \"open\",\n    \"startDate\": \"05/09/2023\",\n    \"endDate\": \"{{batch_end_date}}\"\n  }\n}"
										},
										"url": "https://dev.sunbirded.org/api/course/v1/batch/create"
									},
									"response": []
								},
								{
									"name": "400 - invalid enrollmentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();",
													"",
													"// Verification",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Verify responseCode name",
													"pm.test(\"Status code name has string \\\"Bad Request\\\"\", () => {",
													"    pm.expect(pm.response.status).to.have.string(\"Bad Request\");",
													"});",
													"",
													"// Validation",
													"// Verify responseCode",
													"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
													"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
													"});",
													"",
													"// Verify params",
													"pm.test(\"params.err should be \\\"INVALID_PARAMETER_VALUE\\\"\", () => {",
													"    pm.expect(jsonResponse.params.err).to.eql(\"INVALID_PARAMETER_VALUE\");",
													"});",
													"pm.test(\"params.errmsg should be \\\"Invalid value join for parameter enrollmentType. Please provide a valid value.\\\"\", () => {",
													"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Invalid value join for parameter enrollmentType. Please provide a valid value.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}"
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"courseId\": \"{{course_id}}\",\n    \"name\": \"{{batch_name}}\",\n    \"description\": \"{{batch_description}}\",\n    \"enrollmentType\": \"join\",\n    \"startDate\": \"{{batch_start_date}}\",\n    \"endDate\": \"{{batch_end_date}}\"\n  }\n}"
										},
										"url": "https://dev.sunbirded.org/api/course/v1/batch/create"
									},
									"response": []
								},
								{
									"name": "400 - invalid endDate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();",
													"",
													"// Verification",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Verify responseCode name",
													"pm.test(\"Status code name has string \\\"Bad Request\\\"\", () => {",
													"    pm.expect(pm.response.status).to.have.string(\"Bad Request\");",
													"});",
													"",
													"// Validation",
													"// Verify responseCode",
													"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
													"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
													"});",
													"",
													"// Verify params",
													"pm.test(\"params.err should be \\\"END_DATE_ERROR\\\"\", () => {",
													"    pm.expect(jsonResponse.params.err).to.eql(\"END_DATE_ERROR\");",
													"});",
													"pm.test(\"params.errmsg should be \\\"End date should be greater than start date.\\\"\", () => {",
													"    pm.expect(jsonResponse.params.errmsg).to.eql(\"End date should be greater than start date.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}"
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"courseId\": \"{{course_id}}\",\n    \"name\": \"{{batch_name}}\",\n    \"description\": \"{{batch_description}}\",\n    \"enrollmentType\": \"open\",\n    \"startDate\": \"{{batch_start_date}}\",\n    \"endDate\": \"2023-04-01\"\n  }\n}"
										},
										"url": "https://dev.sunbirded.org/api/course/v1/batch/create"
									},
									"response": []
								},
								{
									"name": "400 - invalid startDate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();",
													"",
													"// Verification",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Verify responseCode name",
													"pm.test(\"Status code name has string \\\"Bad Request\\\"\", () => {",
													"    pm.expect(pm.response.status).to.have.string(\"Bad Request\");",
													"});",
													"",
													"",
													"// Validation",
													"// Verify responseCode",
													"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
													"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
													"});",
													"",
													"// Verify params",
													"pm.test(\"params.err should be \\\"COURSE_BATCH_START_DATE_INVALID\\\"\", () => {",
													"    pm.expect(jsonResponse.params.err).to.eql(\"COURSE_BATCH_START_DATE_INVALID\");",
													"});",
													"pm.test(\"params.errmsg should be \\\"Batch start date should be either today or future date.\\\"\", () => {",
													"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Batch start date should be either today or future date.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}"
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"courseId\": \"{{course_id}}\",\n    \"name\": \"{{batch_name}}\",\n    \"description\": \"{{batch_description}}\",\n    \"enrollmentType\": \"open\",\n    \"startDate\": \"2023-01-01\",\n    \"endDate\": \"{{batch_end_date}}\"\n  }\n}"
										},
										"url": "https://dev.sunbirded.org/api/course/v1/batch/create"
									},
									"response": []
								}
							]
						},
						{
							"name": "BatchUpdation",
							"item": [
								{
									"name": "400 - Invalid course batch id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();",
													"",
													"// Verification",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Verify responseCode name",
													"pm.test(\"Status code name has string \\\"Bad Request\\\"\", () => {",
													"    pm.expect(pm.response.status).to.have.string(\"Bad Request\");",
													"});",
													"",
													"// Validation",
													"// Verify responseCode",
													"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
													"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
													"});",
													"",
													"// Verify params",
													"pm.test(\"params.err should be \\\"INVALID_COURSE_BATCH_ID\\\"\", () => {",
													"    pm.expect(jsonResponse.params.err).to.eql(\"INVALID_COURSE_BATCH_ID\");",
													"});",
													"pm.test(\"params.errmsg should be \\\"Invalid course batch id \\\"\", () => {",
													"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Invalid course batch id \");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "**Accept** relates to content-Type such as **\"MIME\"**, Its used in response body for executing different multi purpose operations.Therefore, its important that the server is correctly set up, so that the MIME types transmitted are recognised and correct to determine what action to do when a resource is fetched."
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be:- \n\n  - Application/json\n\n  - Multipart/form-data\n\n  - Application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text",
												"description": "Time Stamp at which **Update a batch** request was sent."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"type": "text",
												"description": "This Id Uniquely identifies a request if the same API is executed multiple times."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"enrollmentType\": \"open\",\n        \"startDate\": \"{{batch_start_date}}\",\n        \"enrollmentEndDate\": \"{{batch_end_date}}\",\n        \"status\": 1,\n        \"courseId\": \"{{course_id}}\",\n        \"id\": \"01377666464491929614\"\n    }\n}"
										},
										"url": "{{host}}/api/course/v1/batch/update"
									},
									"response": []
								},
								{
									"name": "400 - Missing Batch Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();",
													"",
													"// Verification",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Verify responseCode name",
													"pm.test(\"Status code name has string \\\"Bad Request\\\"\", () => {",
													"    pm.expect(pm.response.status).to.have.string(\"Bad Request\");",
													"});",
													"",
													"// Validation",
													"// Verify responseCode",
													"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
													"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
													"});",
													"",
													"// Verify params",
													"pm.test(\"params.err should be \\\"MANDATORY_PARAMETER_MISSING\\\"\", () => {",
													"    pm.expect(jsonResponse.params.err).to.eql(\"MANDATORY_PARAMETER_MISSING\");",
													"});",
													"pm.test(\"params.errmsg should be \\\"Mandatory parameter id is missing.\\\"\", () => {",
													"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Mandatory parameter id is missing.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "**Accept** relates to content-Type such as **\"MIME\"**, Its used in response body for executing different multi purpose operations.Therefore, its important that the server is correctly set up, so that the MIME types transmitted are recognised and correct to determine what action to do when a resource is fetched."
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be:- \n\n  - Application/json\n\n  - Multipart/form-data\n\n  - Application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text",
												"description": "Time Stamp at which **Update a batch** request was sent."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"type": "text",
												"description": "This Id Uniquely identifies a request if the same API is executed multiple times."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"enrollmentType\": \"open\",\n        \"startDate\": \"{{batch_update_date}}\",\n        \"enrollmentEndDate\": \"{{batch_end_date}}\",\n        \"status\": 1,\n        \"courseId\": \"{{course_id}}\"\n    }\n}"
										},
										"url": "{{host}}/api/course/v1/batch/update"
									},
									"response": []
								},
								{
									"name": "400 - Missing Course Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();",
													"",
													"// Verification",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Verify responseCode name",
													"pm.test(\"Status code name has string \\\"Bad Request\\\"\", () => {",
													"    pm.expect(pm.response.status).to.have.string(\"Bad Request\");",
													"});",
													"",
													"// Validation",
													"// Verify responseCode",
													"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
													"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
													"});",
													"",
													"// Verify params",
													"pm.test(\"params.err should be \\\"MANDATORY_PARAMETER_MISSING\\\"\", () => {",
													"    pm.expect(jsonResponse.params.err).to.eql(\"MANDATORY_PARAMETER_MISSING\");",
													"});",
													"pm.test(\"params.errmsg should be \\\"Mandatory parameter courseId/collectionId is missing.\\\"\", () => {",
													"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Mandatory parameter courseId/collectionId is missing.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "**Accept** relates to content-Type such as **\"MIME\"**, Its used in response body for executing different multi purpose operations.Therefore, its important that the server is correctly set up, so that the MIME types transmitted are recognised and correct to determine what action to do when a resource is fetched."
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be:- \n\n  - Application/json\n\n  - Multipart/form-data\n\n  - Application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text",
												"description": "Time Stamp at which **Update a batch** request was sent."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"type": "text",
												"description": "This Id Uniquely identifies a request if the same API is executed multiple times."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"enrollmentType\": \"open\",\n        \"startDate\": \"{{batch_update_date}}\",\n        \"enrollmentEndDate\": \"{{batch_end_date}}\",\n        \"status\": 1,\n        \"id\": \"01377666464491929614\"\n    }\n}"
										},
										"url": "{{host}}/api/course/v1/batch/update"
									},
									"response": []
								},
								{
									"name": "400 - Invalid status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();",
													"",
													"// Verification",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Verify responseCode name",
													"pm.test(\"Status code name has string \\\"Bad Request\\\"\", () => {",
													"    pm.expect(pm.response.status).to.have.string(\"Bad Request\");",
													"});",
													"",
													"// Validation",
													"// Verify responseCode",
													"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
													"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
													"});",
													"",
													"// Verify params",
													"pm.test(\"params.err should be \\\"INVALID_PROGRESS_STATUS\\\"\", () => {",
													"    pm.expect(jsonResponse.params.err).to.eql(\"INVALID_PROGRESS_STATUS\");",
													"});",
													"pm.test(\"params.errmsg should be \\\"Progress status value should be NOT_STARTED(0), STARTED(1), COMPLETED(2).\\\"\", () => {",
													"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Progress status value should be NOT_STARTED(0), STARTED(1), COMPLETED(2).\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "**Accept** relates to content-Type such as **\"MIME\"**, Its used in response body for executing different multi purpose operations.Therefore, its important that the server is correctly set up, so that the MIME types transmitted are recognised and correct to determine what action to do when a resource is fetched."
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be:- \n\n  - Application/json\n\n  - Multipart/form-data\n\n  - Application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text",
												"description": "Time Stamp at which **Update a batch** request was sent."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"type": "text",
												"description": "This Id Uniquely identifies a request if the same API is executed multiple times."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"enrollmentType\": \"open\",\n        \"startDate\": \"{{batch_update_date}}\",\n        \"enrollmentEndDate\": \"{{batch_end_date}}\",\n        \"status\": 5,\n        \"courseId\": \"do_113776650927300608138\",\n        \"id\": \"01377666464491929614\"\n    }\n}"
										},
										"url": "{{host}}/api/course/v1/batch/update"
									},
									"response": []
								},
								{
									"name": "400 - invalid date format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();",
													"",
													"// Verification",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Verify responseCode name",
													"pm.test(\"Status code name has string \\\"Bad Request\\\"\", () => {",
													"    pm.expect(pm.response.status).to.have.string(\"Bad Request\");",
													"});",
													"",
													"// Validation",
													"// Verify responseCode",
													"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
													"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
													"});",
													"",
													"// Verify params",
													"pm.test(\"params.err should be \\\"DATE_FORMAT_ERRROR\\\"\", () => {",
													"    pm.expect(jsonResponse.params.err).to.eql(\"DATE_FORMAT_ERRROR\");",
													"});",
													"pm.test(\"params.errmsg should be \\\"Date format error.\\\"\", () => {",
													"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Date format error.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}"
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"courseId\": \"{{course_id}}\",\n        \"name\": \"{{batch_name}}\",\n        \"description\": \"{{batch_description}}\",\n        \"enrollmentType\": \"open\",\n        \"startDate\": \"05/09/2023\",\n        \"endDate\": \"{{batch_end_date}}\",\n        \"id\": \"01377666260145766417\"\n    }\n}"
										},
										"url": "{{host}}/api/course/v1/batch/update"
									},
									"response": []
								},
								{
									"name": "400 - invalid enrollmentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();",
													"",
													"// Verification",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Verify responseCode name",
													"pm.test(\"Status code name has string \\\"Bad Request\\\"\", () => {",
													"    pm.expect(pm.response.status).to.have.string(\"Bad Request\");",
													"});",
													"",
													"// Validation",
													"// Verify responseCode",
													"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
													"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
													"});",
													"",
													"// Verify params",
													"pm.test(\"params.err should be \\\"INVALID_PARAMETER_VALUE\\\"\", () => {",
													"    pm.expect(jsonResponse.params.err).to.eql(\"INVALID_PARAMETER_VALUE\");",
													"});",
													"pm.test(\"params.errmsg should be \\\"Invalid value join for parameter enrollmentType. Please provide a valid value.\\\"\", () => {",
													"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Invalid value join for parameter enrollmentType. Please provide a valid value.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}"
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"courseId\": \"{{course_id}}\",\n    \"name\": \"{{batch_name}}\",\n    \"description\": \"{{batch_description}}\",\n    \"enrollmentType\": \"join\",\n    \"startDate\": \"{{batch_start_date}}\",\n    \"endDate\": \"{{batch_end_date}}\",\n    \"id\":\"01377666260145766417\"\n  }\n}"
										},
										"url": "{{host}}/api/course/v1/batch/update"
									},
									"response": []
								},
								{
									"name": "400 - invalid endDate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();",
													"",
													"// Verification",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Verify responseCode name",
													"pm.test(\"Status code name has string \\\"Bad Request\\\"\", () => {",
													"    pm.expect(pm.response.status).to.have.string(\"Bad Request\");",
													"});",
													"",
													"// Validation",
													"// Verify responseCode",
													"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
													"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
													"});",
													"",
													"// Verify params",
													"pm.test(\"params.err should be \\\"END_DATE_ERROR\\\"\", () => {",
													"    pm.expect(jsonResponse.params.err).to.eql(\"END_DATE_ERROR\");",
													"});",
													"pm.test(\"params.errmsg should be \\\"End date should be greater than start date.\\\"\", () => {",
													"    pm.expect(jsonResponse.params.errmsg).to.eql(\"End date should be greater than start date.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}"
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"courseId\": \"{{course_id}}\",\n        \"name\": \"{{batch_name}}\",\n        \"description\": \"{{batch_description}}\",\n        \"enrollmentType\": \"open\",\n        \"startDate\": \"{{batch_start_date}}\",\n        \"endDate\": \"2023-04-01\",\n        \"id\": \"01377666260145766417\"\n    }\n}"
										},
										"url": "{{host}}/api/course/v1/batch/update"
									},
									"response": []
								},
								{
									"name": "400 - invalid startDate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();",
													"",
													"// Verification",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Verify responseCode name",
													"pm.test(\"Status code name has string \\\"Bad Request\\\"\", () => {",
													"    pm.expect(pm.response.status).to.have.string(\"Bad Request\");",
													"});",
													"",
													"// Validation",
													"// Verify responseCode",
													"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
													"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
													"});",
													"",
													"// Verify params",
													"pm.test(\"params.err should be \\\"INVALID_BATCH_START_DATE_ERROR\\\"\", () => {",
													"    pm.expect(jsonResponse.params.err).to.eql(\"INVALID_BATCH_START_DATE_ERROR\");",
													"});",
													"pm.test(\"params.errmsg should be \\\"Please provide valid Start Date.\\\"\", () => {",
													"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Please provide valid Start Date.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}"
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"courseId\": \"do_113776650927300608138\",\n        \"name\": \"{{batch_name}}\",\n        \"description\": \"{{batch_description}}\",\n        \"enrollmentType\": \"open\",\n        \"startDate\": \"2023-01-01\",\n        \"endDate\": \"{{batch_end_date}}\",\n        \"id\": \"01377666464491929614\"\n    }\n}"
										},
										"url": "{{host}}/api/course/v1/batch/update"
									},
									"response": []
								}
							]
						},
						{
							"name": "BatchRead",
							"item": [
								{
									"name": "ReadBatchV1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set('invalid_batch_id', '1aswe3daa');"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be:- \n\n  - Application/json\n\n  - Multipart/form-data\n\n  - Application/x-www-form-urlencoded"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text",
												"description": "Time Stamp at which **Fetch a batch** request was sent."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text",
												"description": "This Id Uniquely identifies a request if the same API is executed multiple times."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"type": "text",
												"description": "This Id Uniquely identifies the type of device (Mobile)(desktop) used to access Sunbird."
											}
										],
										"url": "{{host}}/api/course/v1/batch/read/{{invalid_batch_id}}"
									},
									"response": []
								}
							]
						},
						{
							"name": "BatchSearch",
							"item": [
								{
									"name": "500 - No Filters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();",
													"",
													"// Verification",
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"// Validation",
													"// Verify responseCode",
													"pm.test(\"responseCode should be \\\"SERVER_ERROR\\\"\", () => {",
													"    pm.expect(jsonResponse.responseCode).to.eql(\"SERVER_ERROR\");",
													"});",
													"pm.test(\"params.err should be \\\"INTERNAL_ERROR\\\"\", () => {",
													"    pm.expect(jsonResponse.params.err).to.eql(\"INTERNAL_ERROR\");",
													"});",
													"pm.test(\"params.errmsg should be \\\"Process failed,please try again later.\\\"\", () => {",
													"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Process failed,please try again later.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be:- \n\n  - Application/json\n\n  - Multipart/form-data\n\n  - Application/x-www-form-urlencoded"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text",
												"description": "Time Stamp at which **Lists the existing batches** request was sent."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text",
												"description": "This Id Uniquely identifies a request if the same API is executed multiple times."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"type": "text",
												"description": "This Id Uniquely identifies the type of device (Mobile)(desktop) used to access Sunbird."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {}\n}"
										},
										"url": "{{host}}/api/course/v1/batch/list"
									},
									"response": []
								}
							]
						},
						{
							"name": "BatchCertificate",
							"item": [
								{
									"name": "BatchCertificateTemplateAddV1",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"batch\": {\n            \"courseId\": \"{{course_id}}\",\n            \"batchId\": \"{{batch_id}}\",\n            \"template\": {\n                \"identifier\": \"{{asset_id}}\",\n                \"criteria\": {\n                    \"enrollment\": {\n                        \"status\": \"2\"\n                    }\n                },\n                \"signatoryList\": [\n                    {\n                        \"name\": \"string\",\n                        \"id\": \"string\",\n                        \"designation\": \"CEO\",\n                        \"image\": \"string\"\n                    }\n                ],\n                \"issuer\": {\n                    \"name\": \"string\",\n                    \"url\": \"string\",\n                    \"publicKey\": [\n                        7,\n                        8\n                    ]\n                }\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}/api/course/batch/cert/v1/template/add"
									},
									"response": []
								},
								{
									"name": "BatchCertificateTemplateRemoveV1",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"batch\": {\n            \"courseId\": \"{{course_id}}\",\n            \"batchId\": \"{{batch_id}}\",\n            \"template\": {\n                \"templateId\": \"{{asset_id}}\"\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}/api/course/batch/cert/v1/template/remove"
									},
									"response": []
								},
								{
									"name": "BatchCertificateIssueV1",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-authenticated-user-token",
												"value": "{{keycloak_access_token}}"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n           \"courseId\": \"{{course_id}}\",\n            \"batchId\": \"{{batch_id}}\",\n            \"userIds\": [\"{{user_id}}\"]\n    }\n}"
										},
										"url": "{{host}}/api/course/batch/cert/v1/issue"
									},
									"response": []
								}
							]
						},
						{
							"name": "BatchList",
							"item": [
								{
									"name": "500 - No Filters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();",
													"",
													"// Verification",
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"// Validation",
													"// Verify responseCode",
													"pm.test(\"responseCode should be \\\"SERVER_ERROR\\\"\", () => {",
													"    pm.expect(jsonResponse.responseCode).to.eql(\"SERVER_ERROR\");",
													"});",
													"pm.test(\"params.err should be \\\"INTERNAL_ERROR\\\"\", () => {",
													"    pm.expect(jsonResponse.params.err).to.eql(\"INTERNAL_ERROR\");",
													"});",
													"pm.test(\"params.errmsg should be \\\"Process failed,please try again later.\\\"\", () => {",
													"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Process failed,please try again later.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {}\n}"
										},
										"url": "{{host}}/api/course/v1/batch/list"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "CourseEnroll",
					"item": [
						{
							"name": "CourseEnrollV1",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"courseId\": \"{{course_id}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/course/v1/enroll"
							},
							"response": []
						},
						{
							"name": "CourseUnEnrollV1",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"request\": {\n      \"courseId\": \"{{course_id}}\",\n      \"batchId\": \"{{batch_id}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/course/v1/unenroll"
							},
							"response": []
						},
						{
							"name": "CourseEnrollListV1",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									}
								],
								"url": "{{host}}/api/course/v1/user/enrollment/list/{{user_id}}"
							},
							"response": []
						}
					]
				},
				{
					"name": "ContentAPIs",
					"item": [
						{
							"name": "Content Read",
							"item": [
								{
									"name": "400 - Missing filters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();",
													"",
													"// Verification",
													"pm.test(\"Status code is CLIENT_ERROR (400)\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Verify responseCode",
													"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", function () {",
													"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
													"});",
													"",
													"// Verify err",
													"pm.test(\"err should be \\\"ERR_CONTENT_SEARCH_FIELDS_MISSING\\\"\", function () {",
													"    pm.expect(jsonResponse.params.err).to.eql(\"ERR_CONTENT_SEARCH_FIELDS_MISSING\");",
													"});",
													"",
													"// Verify errmsg",
													"pm.test(\"errmsg should be \\\"Required fields for search content are missing\\\"\", function () {",
													"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Required fields for search content are missing\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {}\n}"
										},
										"url": "{{host}}/api/content/v1/search"
									},
									"response": []
								}
							]
						},
						{
							"name": "ContentStateReadV1",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"userId\": \"{{user_id}}\",\n        \"courseId\": \"{{course_id}}\",\n        \"batchId\": \"{{batch_id}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/course/v1/content/state/read"
							},
							"response": []
						},
						{
							"name": "ContentStateUpdateV1",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"request\": {\n    \"userId\": \"{{user_id}}\",\n    \"contents\": [\n      {\n        \"contentId\": \"{{content_id}}\",\n        \"batchId\": \"{{batch_id}}\",\n        \"status\": 2,\n        \"courseId\": \"{{course_id}}\",\n        \"lastAccessTime\": \"2020-11-23 12:58:35:179+0000\"\n      }\n    ]\n  }\n}"
								},
								"url": "{{host}}/api/course/v1/content/state/update"
							},
							"response": []
						}
					]
				},
				{
					"name": "AggregateAPIs",
					"item": [
						{
							"name": "400 - Missing activity id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is CLIENT_ERROR (400)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify responseCode",
											"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
											"});",
											"",
											"// Verify err",
											"pm.test(\"err should be \\\"ACTIVITY_ID_MISSING\\\"\", function () {",
											"    pm.expect(jsonResponse.params.err).to.eql(\"ACTIVITY_ID_MISSING\");",
											"});",
											"",
											"// Verify errmsg",
											"pm.test(\"errmsg should be \\\"ActivityId is mandatory.\\\"\", function () {",
											"    pm.expect(jsonResponse.params.errmsg).to.eql(\"ActivityId is mandatory.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"request\": {\n    \"groupId\": \"{{group_id}}\",\n    \"activityId\": \"{{activity_id}}\",\n    \"activityType\": \"Course\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/data/v1/group/activity/agg"
							},
							"response": []
						},
						{
							"name": "400 - Missing group id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is CLIENT_ERROR (400)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify responseCode",
											"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
											"});",
											"",
											"// Verify err",
											"pm.test(\"err should be \\\"GROUP_ID_MISSING\\\"\", function () {",
											"    pm.expect(jsonResponse.params.err).to.eql(\"GROUP_ID_MISSING\");",
											"});",
											"",
											"// Verify errmsg",
											"pm.test(\"errmsg should be \\\"GroupId is mandatory.\\\"\", function () {",
											"    pm.expect(jsonResponse.params.errmsg).to.eql(\"GroupId is mandatory.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"activityId\": \"do_113776660278427648168\",\n        \"activityType\": \"Course\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/data/v1/group/activity/agg"
							},
							"response": []
						},
						{
							"name": "400 - Missing activity type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is CLIENT_ERROR (400)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify responseCode",
											"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
											"});",
											"",
											"// Verify err",
											"pm.test(\"err should be \\\"ACTIVITY_TYPE_MISSING\\\"\", function () {",
											"    pm.expect(jsonResponse.params.err).to.eql(\"ACTIVITY_TYPE_MISSING\");",
											"});",
											"",
											"// Verify errmsg",
											"pm.test(\"errmsg should be \\\"ActivityType is mandatory.\\\"\", function () {",
											"    pm.expect(jsonResponse.params.errmsg).to.eql(\"ActivityType is mandatory.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"groupId\": \"{{group_id}}\",\n        \"activityId\": \"do_113776660278427648168\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/data/v1/group/activity/agg"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "HealthCheck",
			"item": [
				{
					"name": "HealthCheck",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{host}}/health"
					},
					"response": []
				}
			]
		},
		{
			"name": "AuthToken",
			"item": [
				{
					"name": "UserToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonResponse = pm.response.json();",
									"",
									"// Set global variable",
									"// pm.variables.set('refresh_token', jsonResponse.refresh_token);",
									"// pm.globals.set(\"refresh_token\", jsonResponse.result.identifier);",
									"pm.collectionVariables.set(\"refresh_token\", jsonResponse.refresh_token);",
									"// pm.collectionVariables.set(\"variable_key\", \"variable_value\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Cookie",
								"value": "connect.sid=s%3Ad3chYLP8OfuB2bWgfEFohiWpDxM7GFol.gOPmzH3d2nP9enZ5qSHlVx1e%2BozTleCjXtfz7LUycCk"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "contentCreator",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Test@123",
									"type": "text"
								}
							]
						},
						"url": "{{host}}/auth/realms/sunbird/protocol/openid-connect/token"
					},
					"response": []
				},
				{
					"name": "RefreshToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extract the locationId from the response and set it to the environment variable",
									"pm.test(\"Set access_token in environment variable\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set(\"keycloak_access_token\", responseJson.result.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Cookie",
								"value": "connect.sid=s%3Ad3chYLP8OfuB2bWgfEFohiWpDxM7GFol.gOPmzH3d2nP9enZ5qSHlVx1e%2BozTleCjXtfz7LUycCk"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "refresh_token",
									"value": "{{refresh_token}}",
									"type": "text"
								}
							]
						},
						"url": "{{host}}/auth/v1/refresh/token"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"    if (pm.environment.get(\"environment\") === \"local\") {",
					"        var baseURL = pm.environment.get(\"host\")",
					"        pm.variables.set(\"baseURL\", baseURL);",
					"    } else {",
					"        var baseURL = pm.environment.get(\"host\") + pm.variables.get(\"basePath\");",
					"        pm.variables.set(\"baseURL\", baseURL);",
					"    }",
					"",
					"    function generateRandomBatchName() {",
					"    const adjectives = ['Advanced', 'Beginner', 'Intermediate', 'Expert', 'Pro', 'Novice', 'Skilled', 'Enthusiastic'];",
					"    const subjects = ['Math', 'Science', 'History', 'Literature', 'Programming', 'Languages', 'Art', 'Music'];",
					"    const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];",
					"    const randomSubject = subjects[Math.floor(Math.random() * subjects.length)];",
					"    const randomNumber = Math.floor(Math.random() * 1000);",
					"    ",
					"    return `${randomAdjective} ${randomSubject} Batch ${randomNumber}`;",
					"}",
					"",
					"function generateRandomDescription() {",
					"    const phrases = [",
					"        'Join this batch to enhance your knowledge and skills.',",
					"        'In this batch, we explore various topics and concepts.',",
					"        'Looking for an engaging learning experience? Join this batch now!',",
					"        'We focus on interactive learning and collaborative discussions.',",
					"        'This batch is open to learners of all levels.'",
					"    ];",
					"    ",
					"    const randomPhrase = phrases[Math.floor(Math.random() * phrases.length)];",
					"    return randomPhrase;",
					"}",
					"",
					"const batchName = generateRandomBatchName();",
					"const batchDescription = generateRandomDescription();",
					"// Calculate the start date (current date - 5 days)",
					"const currentDate = new Date();",
					"const startDate = new Date(currentDate);",
					"startDate.setDate(currentDate.getDate());",
					"",
					"// Calculate the end date (end of 3 months from current date)",
					"const endDate = new Date(currentDate);",
					"endDate.setMonth(currentDate.getMonth() + 3, 0); // Set to the last day of the third month",
					"",
					"// Format dates as strings (YYYY-MM-DD)",
					"const formattedStartDate = startDate.toISOString().split('T')[0];",
					"const formattedEndDate = endDate.toISOString().split('T')[0];",
					"",
					"// Get the current date",
					"const currentUpdateDate = new Date();",
					"",
					"// Add 5 days to the current date",
					"const updateDate = new Date(currentUpdateDate);",
					"updateDate.setDate(currentUpdateDate.getDate() + 5);",
					"",
					"// Format the update date as a string (YYYY-MM-DD)",
					"const formattedUpdateDate = updateDate.toISOString().split('T')[0];",
					"",
					"// Set the environment variable",
					"pm.environment.set('batch_update_date', formattedUpdateDate);",
					"",
					"",
					"// Set the environment variables",
					"pm.environment.set('batch_start_date', formattedStartDate);",
					"pm.environment.set('batch_end_date', formattedEndDate);",
					"",
					"",
					"pm.environment.set('batch_name', batchName);",
					"pm.environment.set('batch_description', batchDescription);",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "refresh_token",
			"value": ""
		}
	]
}